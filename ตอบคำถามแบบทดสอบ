
### 1\. การค้นหาเส้นทางจากสถานี A ไปยัง B

แอปพลิเคชันนี้ถูกออกแบบมาเพื่อทำหน้าที่นี้โดยเฉพาะ โดยมีส่วนประกอบหลักคือ:

  * **หน้าจอหลัก (`home_screen.dart`):** มี Dropdown ให้ผู้ใช้เลือกสถานีต้นทาง (A) และสถานีปลายทาง (B)
  * **Backend API (`app.py`):** รับข้อมูลสถานีเพื่อนำไปคำนวณเส้นทางที่เหมาะสมที่สุด
 
### 2\. การแสดงผลการค้นหา

แอปพลิเคชันแสดงผลข้อมูลตามที่กำหนดไว้อย่างครบถ้วนในหน้า `route_display_screen.dart` ดังนี้:

  * **✅ สายรถไฟที่ใช้:** ในแต่ละขั้นตอนการเดินทาง จะแสดงชื่อสายรถไฟ (เช่น "BTS Sukhumvit Line") พร้อมสีประจำสาย
  * **✅ จำนวนสถานีทั้งหมด:** แสดงผลรวมจำนวนสถานีที่ต้องเดินทางในส่วนสรุปด้านบน
  * **✅ การเปลี่ยนสาย (Transfers):** แสดงจำนวนครั้งที่ต้องเปลี่ยนสายในส่วนสรุป และแสดงเป็นขั้นตอน "Transfer" ที่ชัดเจนในรายการเดินทาง
  * **✅ เวลารวมในการเดินทาง:** แสดงผลรวมเวลาที่ใช้ในการเดินทางทั้งหมดเป็นนาทีในส่วนสรุป

### 3\. สโคปของข้อมูลสถานีและสายรถไฟ

โปรเจกต์นี้ใช้ข้อมูลแบบ Mockup ที่กำหนดขึ้นเอง ซึ่งถูกจัดเก็บไว้ในไฟล์ `backend_api/database.json` ไฟล์นี้ประกอบด้วย:

  * `stations`: รายชื่อสถานีทั้งหมดพร้อม ID
  * `lines`: ข้อมูลสายรถไฟ, สถานีในแต่ละสาย, เวลาเดินทางระหว่างสถานี และข้อมูลเพิ่มเติมอื่นๆ
  * `transfers`: ข้อมูลจุดเชื่อมต่อระหว่างสายต่างๆ

การออกแบบนี้ทำให้สามารถทดสอบและพัฒนาแอปพลิเคชันได้อย่างสะดวก โดยไม่ต้องเชื่อมต่อกับข้อมูลจริง และเป็นไปตามแนวทางที่โจทย์กำหนดคือการเน้นที่วิธีคิดและโครงสร้างของแอปพลิเคชัน

### 4\. ตัวอย่าง Request และ Response ของ API

จากไฟล์ `app.py` เรามี API ที่ออกแบบไว้ 2 ตัวหลัก ดังนี้ครับ:

#### **GET /api/stations**

  * **วัตถุประสงค์:** ดึงรายชื่อสถานีทั้งหมดเพื่อใช้ใน Dropdown ของแอปพลิเคชัน
  * **Request:**
      * `GET http://127.0.0.1:5002/api/stations`
      * ไม่มี Request Body
  * **Response (ตัวอย่าง):**
    ```json
    [
        {
            "id": "N8",
            "name": "Mo Chit"
        },
        {
            "id": "E4",
            "name": "Asok"
        },
        ...
    ]
    ```

#### **POST /api/route**

  * **วัตถุประสงค์:** ค้นหาเส้นทางที่ดีที่สุดระหว่างสองสถานี
  * **Request:**
      * `POST http://127.0.0.1:5002/api/route`
      * **Body:**
        ```json
        {
          "start_station_id": "N8",
          "end_station_id": "S2",
          "preference": "fastest"
        }
        ```
  * **Response (ตัวอย่าง):**
    ```json
    {
      "total_time": 24,
      "total_stations": 8,
      "estimated_fare": 37,
      "steps": [
        {
          "type": "board",
          "line_name": "BTS Sukhumvit Line",
          "line_color": "#76B852",
          "operating_hours": "05:15 - 00:49",
          "start_station": "Mo Chit",
          "end_station": "Siam",
          "stops": 6
        },
        {
          "type": "board",
          "line_name": "BTS Silom Line",
          "line_color": "#00885A",
          "operating_hours": "05:30 - 00:42",
          "start_station": "Siam",
          "end_station": "Sala Daeng",
          "stops": 2
        }
      ]
    }
    ```

### 5\. ฟีเจอร์เพิ่มเติม (Bonus Features)

แอปพลิเคชันนี้ได้มีการพัฒนาฟีเจอร์เพิ่มเติมจากที่กำหนดไว้หลายอย่าง เพื่อเพิ่มความสามารถและประสบการณ์การใช้งานที่ดีขึ้น:

  * **ฟีเจอร์ที่ทำเพิ่มเติมแล้ว:**

      * **ค้นหาแบบหลายเงื่อนไข:** ผู้ใช้สามารถเลือกระหว่าง "เส้นทางที่เร็วที่สุด" (Fastest Route) และ "เปลี่ยนสายน้อยที่สุด" (Fewest Transfers)
      * **แสดงค่าโดยสารประมาณการ:** มีการคำนวณและแสดงค่าโดยสารเบื้องต้นสำหรับเส้นทางนั้นๆ
      * **แสดงเวลาทำการ:** ในรายละเอียดเส้นทางมีการแสดงเวลาเปิด-ปิดของรถไฟฟ้าแต่ละสาย
      * **ระบบบันทึกเส้นทางโปรด (Favorites):** ผู้ใช้สามารถบันทึกเส้นทางที่ใช้บ่อย และเรียกดูหรือลบได้จากหน้า Favorites
      * **แผนภาพเส้นทาง:** แสดงแผนภาพของเส้นทางแบบง่ายๆ เพื่อให้เห็นภาพรวมของการเดินทางและจุดเปลี่ยนสาย

  * **สิ่งที่คิดว่าควรมีเพิ่มในอนาคต:**

      * **การเชื่อมต่อกับแผนที่จริง:** นำเส้นทางที่คำนวณได้ไปวาดเป็นเส้นบนแผนที่จริงๆ เช่น Google Maps เพื่อให้เห็นภาพชัดเจนยิ่งขึ้น
      * **ข้อมูล Real-time:** เชื่อมต่อกับ API ที่ให้ข้อมูลขบวนรถแบบเรียลไทม์ เพื่อคำนวณเวลารอรถและเวลาถึงที่แม่นยำขึ้น
      * **รองรับหลายภาษา:** เพิ่มการแสดงผลภาษาอื่นๆ เช่น ภาษาอังกฤษ
      * **แจ้งเตือน (Push Notifications):** แจ้งเตือนเมื่อเกิดเหตุการณ์ผิดปกติในระบบรถไฟฟ้า เช่น ความล่าช้า หรือการปิดบริการ
      * **การออกแบบเพื่อการเข้าถึง (Accessibility):** ปรับปรุง UI/UX สำหรับผู้พิการ เช่น การรองรับ Screen Reader หรือโหมดสีคอนทราสต์สูง
